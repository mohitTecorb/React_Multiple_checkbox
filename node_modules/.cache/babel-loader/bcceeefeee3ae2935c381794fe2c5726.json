{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Github/Multiple_checkbox/src/Components/MultiSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport orderData from './DemoData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiSelector = () => {\n  _s();\n  const [dummyData, setDummyData] = useState([]);\n  const [isAllChecked, setIsAllChecked] = useState(false);\n  const [selectedId, setSelectedId] = useState([]); // in this state you will get all the Id of selected checkbox\n\n  useEffect(() => {\n    setDummyData(orderData);\n  }, []);\n  //*****************************handle Checkbox function ****************************************** */\n  const handleCheckBox = id => {\n    let newData = dummyData;\n    newData === null || newData === void 0 ? void 0 : newData.map(it => {\n      if (it.Id == id) {\n        it.isSelect = !it.isSelect;\n      }\n    });\n    setDummyData([...newData]); // here , when click on single checkbox then i'm changing the status of cehcked or unchecked \n    let selectedData = dummyData === null || dummyData === void 0 ? void 0 : dummyData.filter(data => data.isSelect); // here we get the length of total selected cehckbox \n    if (selectedData.length == dummyData.length) {\n      // here compare the length \n      setIsAllChecked(true); // making select all cehckbox checked if length is equal \n    } else {\n      setIsAllChecked(false);\n    }\n    let tempdata = selectedData === null || selectedData === void 0 ? void 0 : selectedData.map(data => data.Id);\n    setSelectedId(tempdata);\n  };\n  //******************************* this is for select all function ************************************************ */\n  const selectAllCheckeBox = () => {\n    setIsAllChecked(!isAllChecked);\n    let allCheck = dummyData === null || dummyData === void 0 ? void 0 : dummyData.map(data => {\n      return {\n        ...data,\n        isSelect: isAllChecked ? false : true\n      };\n    });\n    setDummyData([...allCheck]);\n    let tempdata = allCheck === null || allCheck === void 0 ? void 0 : allCheck.reduce((acc, curr) => {\n      if (curr.isSelect) {\n        acc.push(curr.Id);\n      }\n      return acc;\n    }, []);\n    setSelectedId(tempdata);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkboxContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"checkbox\",\n        checked: isAllChecked,\n        name: \"allselect\",\n        type: \"checkbox\",\n        onChange: e => selectAllCheckeBox(e, null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"checkbox\",\n        children: \"Select All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), dummyData === null || dummyData === void 0 ? void 0 : dummyData.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: item.Id,\n          name: \"checkbox\",\n          type: \"checkbox\",\n          checked: item.isSelect,\n          onChange: e => {\n            handleCheckBox(item.Id, item);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: item === null || item === void 0 ? void 0 : item.Id,\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(MultiSelector, \"4C+v25H4PO7mxNZf+Uj+9/dNFOU=\");\n_c = MultiSelector;\nexport default MultiSelector;\nvar _c;\n$RefreshReg$(_c, \"MultiSelector\");","map":{"version":3,"names":["React","useEffect","useState","orderData","MultiSelector","dummyData","setDummyData","isAllChecked","setIsAllChecked","selectedId","setSelectedId","handleCheckBox","id","newData","map","it","Id","isSelect","selectedData","filter","data","length","tempdata","selectAllCheckeBox","allCheck","reduce","acc","curr","push","e","item","index","name"],"sources":["/home/mohit/Github/Multiple_checkbox/src/Components/MultiSelector.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport orderData from './DemoData'\nconst MultiSelector = () => {\n    const [dummyData, setDummyData] = useState([])\n    const [isAllChecked, setIsAllChecked] = useState(false)\n    const [selectedId, setSelectedId] = useState([]) // in this state you will get all the Id of selected checkbox\n\n    useEffect(() => {\n        setDummyData(orderData)\n    }, [])\n    //*****************************handle Checkbox function ****************************************** */\n    const handleCheckBox = (id) => {\n        let newData = dummyData\n        newData?.map((it) => {\n            if (it.Id == id) {\n                it.isSelect = !it.isSelect\n            }\n        })\n        setDummyData([...newData]) // here , when click on single checkbox then i'm changing the status of cehcked or unchecked \n        let selectedData = dummyData?.filter((data) => data.isSelect) // here we get the length of total selected cehckbox \n        if (selectedData.length == dummyData.length) { // here compare the length \n            setIsAllChecked(true) // making select all cehckbox checked if length is equal \n        } else {\n            setIsAllChecked(false)\n        }\n        let tempdata = selectedData?.map((data) => data.Id)\n        setSelectedId(tempdata)\n    }\n    //******************************* this is for select all function ************************************************ */\n    const selectAllCheckeBox = () => {\n        setIsAllChecked(!isAllChecked)\n        let allCheck = dummyData?.map((data) => { return ({ ...data, isSelect: isAllChecked ? false : true }) })\n        setDummyData([...allCheck])\n        let tempdata = allCheck?.reduce((acc, curr) => {\n            if (curr.isSelect) {\n                acc.push(curr.Id)\n            }\n            return acc;\n        }, [])\n        setSelectedId(tempdata)\n    }\n    return (\n        <div className='checkboxContainer'>\n            <div >\n                <input\n                    id=\"checkbox\"\n                    checked={isAllChecked}\n                    name=\"allselect\"\n                    type=\"checkbox\"\n                    onChange={(e) => selectAllCheckeBox(e, null)}\n                />\n                <label for=\"checkbox\" >Select All</label>\n\n            </div>\n            {dummyData?.map((item, index) => {\n                return (\n                    <div key={index} className=''>\n                        <input\n                            id={item.Id}\n                            name=\"checkbox\"\n                            type=\"checkbox\"\n                            checked={item.isSelect}\n                            onChange={(e) => { handleCheckBox(item.Id, item) }}\n                        />\n                        <label for={item?.Id}>{item.name}</label>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default MultiSelector"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,YAAY;AAAA;AAClC,MAAMC,aAAa,GAAG,MAAM;EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,EAAC;;EAEjDD,SAAS,CAAC,MAAM;IACZK,YAAY,CAACH,SAAS,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EACN;EACA,MAAMQ,cAAc,GAAIC,EAAE,IAAK;IAC3B,IAAIC,OAAO,GAAGR,SAAS;IACvBQ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,GAAG,CAAEC,EAAE,IAAK;MACjB,IAAIA,EAAE,CAACC,EAAE,IAAIJ,EAAE,EAAE;QACbG,EAAE,CAACE,QAAQ,GAAG,CAACF,EAAE,CAACE,QAAQ;MAC9B;IACJ,CAAC,CAAC;IACFX,YAAY,CAAC,CAAC,GAAGO,OAAO,CAAC,CAAC,EAAC;IAC3B,IAAIK,YAAY,GAAGb,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEc,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACH,QAAQ,CAAC,EAAC;IAC9D,IAAIC,YAAY,CAACG,MAAM,IAAIhB,SAAS,CAACgB,MAAM,EAAE;MAAE;MAC3Cb,eAAe,CAAC,IAAI,CAAC,EAAC;IAC1B,CAAC,MAAM;MACHA,eAAe,CAAC,KAAK,CAAC;IAC1B;IACA,IAAIc,QAAQ,GAAGJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEJ,GAAG,CAAEM,IAAI,IAAKA,IAAI,CAACJ,EAAE,CAAC;IACnDN,aAAa,CAACY,QAAQ,CAAC;EAC3B,CAAC;EACD;EACA,MAAMC,kBAAkB,GAAG,MAAM;IAC7Bf,eAAe,CAAC,CAACD,YAAY,CAAC;IAC9B,IAAIiB,QAAQ,GAAGnB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAES,GAAG,CAAEM,IAAI,IAAK;MAAE,OAAQ;QAAE,GAAGA,IAAI;QAAEH,QAAQ,EAAEV,YAAY,GAAG,KAAK,GAAG;MAAK,CAAC;IAAE,CAAC,CAAC;IACxGD,YAAY,CAAC,CAAC,GAAGkB,QAAQ,CAAC,CAAC;IAC3B,IAAIF,QAAQ,GAAGE,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;MAC3C,IAAIA,IAAI,CAACV,QAAQ,EAAE;QACfS,GAAG,CAACE,IAAI,CAACD,IAAI,CAACX,EAAE,CAAC;MACrB;MACA,OAAOU,GAAG;IACd,CAAC,EAAE,EAAE,CAAC;IACNhB,aAAa,CAACY,QAAQ,CAAC;EAC3B,CAAC;EACD,oBACI;IAAK,SAAS,EAAC,mBAAmB;IAAA,wBAC9B;MAAA,wBACI;QACI,EAAE,EAAC,UAAU;QACb,OAAO,EAAEf,YAAa;QACtB,IAAI,EAAC,WAAW;QAChB,IAAI,EAAC,UAAU;QACf,QAAQ,EAAGsB,CAAC,IAAKN,kBAAkB,CAACM,CAAC,EAAE,IAAI;MAAE;QAAA;QAAA;QAAA;MAAA,QAC/C,eACF;QAAO,GAAG,EAAC,UAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB;IAAA;MAAA;MAAA;MAAA;IAAA,QAEvC,EACLxB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAES,GAAG,CAAC,CAACgB,IAAI,EAAEC,KAAK,KAAK;MAC7B,oBACI;QAAiB,SAAS,EAAC,EAAE;QAAA,wBACzB;UACI,EAAE,EAAED,IAAI,CAACd,EAAG;UACZ,IAAI,EAAC,UAAU;UACf,IAAI,EAAC,UAAU;UACf,OAAO,EAAEc,IAAI,CAACb,QAAS;UACvB,QAAQ,EAAGY,CAAC,IAAK;YAAElB,cAAc,CAACmB,IAAI,CAACd,EAAE,EAAEc,IAAI,CAAC;UAAC;QAAE;UAAA;UAAA;UAAA;QAAA,QACrD,eACF;UAAO,GAAG,EAAEA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEd,EAAG;UAAA,UAAEc,IAAI,CAACE;QAAI;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA,GARnCD,KAAK;QAAA;QAAA;QAAA;MAAA,QAST;IAEd,CAAC,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAA,GApEK3B,aAAa;AAAA,KAAbA,aAAa;AAsEnB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module"}